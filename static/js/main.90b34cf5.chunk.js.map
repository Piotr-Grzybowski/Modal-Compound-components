{"version":3,"sources":["Modal/Subcomponents/Header.js","Modal/Subcomponents/Content.js","Modal/Subcomponents/Footer.js","Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","toggle","className","onClick","e","stopPropagation","Content","children","Footer","callToActionLabel","alert","Modal","state","isOpen","isItOn","isNaN","setState","React","Children","map","this","props","child","cloneElement","event","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQASeA,G,MAPA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,OAAV,OACb,yBAAKC,UAAU,eAAeC,QAAS,SAACC,GAAD,OAAOA,EAAEC,oBAC7CL,EACD,4BAAQG,QAAS,kBAAMF,GAAO,KAA9B,kBCGWK,EANC,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,yBAAKL,UAAU,QAAQC,QAAS,SAACC,GAAD,OAAOA,EAAEC,oBACtCE,ICYUC,EAdA,SAAC,GAAD,IAAGC,EAAH,EAAGA,kBAAmBR,EAAtB,EAAsBA,OAAtB,OACb,yBAAKC,UAAU,eAAeC,QAAS,SAACC,GAAD,OAAOA,EAAEC,oBAC9C,4BAAQF,QAAS,kBAAMF,GAAO,KAA9B,UACA,4BACEE,QAAS,WACPF,GAAO,GACPS,MAAM,QAGPD,KCLDE,E,4MAIJC,MAAQ,CACNC,QAAQ,G,EAGVZ,OAAS,SAACa,GACJC,MAAMD,GACR,EAAKE,SAAS,CACZH,QAAS,EAAKD,MAAMC,SAGtB,EAAKG,SAAS,CACZH,OAAQC,K,uDAIJ,IAAD,OACDP,EAAWU,IAAMC,SAASC,IAAIC,KAAKC,MAAMd,UAAU,SAACe,GAAD,OACvDL,IAAMM,aAAaD,EAAO,CAAErB,OAAQ,EAAKA,YAE3C,OACE,yBACEC,UAAU,QACVC,QAAS,SAACqB,GACR,EAAKvB,QAAO,KAGbM,O,GA9BWU,IAAMQ,WAApBd,EACGZ,OAASA,EADZY,EAEGL,QAAUA,EAFbK,EAGGH,OAASA,EAiCHG,QC3BAe,MAZf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAM3B,OAAP,CAAcC,MAAO,sBACrB,kBAAC,EAAMM,QAAP,KACE,iEAEF,kBAAC,EAAME,OAAP,CAAcC,kBAAmB,0BCEnBkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.90b34cf5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = ({ title, toggle }) => (\n  <div className=\"white header\" onClick={(e) => e.stopPropagation()}>\n    {title}\n    <button onClick={() => toggle(false)}>Close Modal</button>\n  </div>\n);\n\nexport default Header;\n","import React from 'react';\n\nconst Content = ({ children }) => (\n  <div className=\"white\" onClick={(e) => e.stopPropagation()}>\n    {children}\n  </div>\n);\n\nexport default Content;\n","import React from 'react';\n\nconst Footer = ({ callToActionLabel, toggle }) => (\n  <div className=\"white footer\" onClick={(e) => e.stopPropagation()}>\n    <button onClick={() => toggle(false)}>Cancel</button>\n    <button\n      onClick={() => {\n        toggle(false);\n        alert('OK');\n      }}\n    >\n      {callToActionLabel}\n    </button>\n  </div>\n);\n\nexport default Footer;\n","import React from 'react';\nimport './Modal.css';\nimport Header from './Subcomponents/Header';\nimport Content from './Subcomponents/Content';\nimport Footer from './Subcomponents/Footer';\n\nclass Modal extends React.Component {\n  static Header = Header;\n  static Content = Content;\n  static Footer = Footer;\n  state = {\n    isOpen: true\n  };\n\n  toggle = (isItOn) => {\n    if (isNaN(isItOn)) {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    } else\n      this.setState({\n        isOpen: isItOn\n      });\n  };\n\n  render() {\n    const children = React.Children.map(this.props.children, (child) =>\n      React.cloneElement(child, { toggle: this.toggle })\n    );\n    return (\n      <div\n        className=\"modal\"\n        onClick={(event) => {\n          this.toggle(false);\n        }}\n      >\n        {children}\n      </div>\n    );\n  }\n}\n\nexport default Modal;\n","import React from 'react';\nimport Modal from './Modal/Modal';\n\nfunction App() {\n  return (\n    <Modal>\n      <Modal.Header title={'Tytuł modala'} />\n      <Modal.Content>\n        <h1>to powinno tak działać</h1>\n      </Modal.Content>\n      <Modal.Footer callToActionLabel={'Udało się'} />\n    </Modal>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}